
attiny85_button_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a7  00000000  00000000  00000847  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000068  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000015d  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000d3  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001d  00000000  00000000  00000ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	14 c0       	rjmp	.+40     	; 0x56 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#include <avr/io.h>
#include <stdbool.h>

int main(void) {

  DDRB &= ~(1 << PB3);								//set PB3 as input
  30:	bb 98       	cbi	0x17, 3	; 23
  PORTB |= (1 << PB3);								//activate pull-up resistor for PB3
  32:	c3 9a       	sbi	0x18, 3	; 24
  DDRB |= (1 << PB0);								//set PB4 as output
  34:	b8 9a       	sbi	0x17, 0	; 23
  DDRB |= (1 << PB1);
  36:	b9 9a       	sbi	0x17, 1	; 23
  PORTB |= 0b00000001;
  38:	c0 9a       	sbi	0x18, 0	; 24
  {
	  //read the button state
	  bool buttonState = PINB & (1 << PB3);
													//if the button is HIGH, turn led on
	  while(!buttonState) {
	   PORTB = PORTB ^ 0b00000001;					 //write to PORTB register to set the LED state to LOW
  3a:	21 e0       	ldi	r18, 0x01	; 1
	   PORTB = PORTB ^ 0b00000010;
  3c:	92 e0       	ldi	r25, 0x02	; 2
  while(1)
  {
	  //read the button state
	  bool buttonState = PINB & (1 << PB3);
													//if the button is HIGH, turn led on
	  while(!buttonState) {
  3e:	b3 99       	sbic	0x16, 3	; 22
  40:	fe cf       	rjmp	.-4      	; 0x3e <__SP_H__>
	   PORTB = PORTB ^ 0b00000001;					 //write to PORTB register to set the LED state to LOW
  42:	88 b3       	in	r24, 0x18	; 24
  44:	82 27       	eor	r24, r18
  46:	88 bb       	out	0x18, r24	; 24
	   PORTB = PORTB ^ 0b00000010;
  48:	88 b3       	in	r24, 0x18	; 24
  4a:	89 27       	eor	r24, r25
  4c:	88 bb       	out	0x18, r24	; 24
	   buttonState = PINB ^ (1 << PB3);
  4e:	86 b3       	in	r24, 0x16	; 22
  while(1)
  {
	  //read the button state
	  bool buttonState = PINB & (1 << PB3);
													//if the button is HIGH, turn led on
	  while(!buttonState) {
  50:	88 30       	cpi	r24, 0x08	; 8
  52:	a9 f7       	brne	.-22     	; 0x3e <__SP_H__>
  54:	f6 cf       	rjmp	.-20     	; 0x42 <__SREG__+0x3>

00000056 <_exit>:
  56:	f8 94       	cli

00000058 <__stop_program>:
  58:	ff cf       	rjmp	.-2      	; 0x58 <__stop_program>
